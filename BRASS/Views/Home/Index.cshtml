@model HomePage

@{
    ViewData["Title"] = "Home Page";
}

<!--<link rel="stylesheet" href="https://esri.github.io/calcite-maps/dist/css/calcite-maps-bootstrap.min-v0.8.css">-->
<!-- Calcite Maps -->
<link rel="stylesheet" href="https://esri.github.io/calcite-maps/dist/css/calcite-maps-arcgis-4.x.min-v0.8.css">
<!-- ArcGIS JS 4 -->
<link rel="stylesheet" href="https://js.arcgis.com/4.13/esri/css/main.css">
<script src="https://js.arcgis.com/4.14/"></script>

<div clas="container">
    <div class="row" style="min-height:80vh">
        <div class="col-lg-6" id="viewDiv" style="border:medium;position:relative;height: 90vh;width: 80vw;margin: 0;padding: 0"></div>
        <div class="col-lg-6" style="margin-top:10%">
            <div class="col-lg-12">
                <div class="form-group col-lg-12" style="display:flex;justify-content:center">
                    <label for="BusDropdown" style="margin:0 1rem">Select A Bus:</label>
                    @Html.DropDownListFor(m => m.BusNumb, Model.BusNumberList, "--- Select ---", new { @id = "BusDropdown", @onchange = "GetRouteInfo()" })
                </div>
            </div>
            <div class="row col-lg-9" id="BusData" style="margin:auto;border:solid;justify-content:center;padding:0px">
                <div class="row col-lg-12" style="outline-style:solid;justify-content:center"><h2>All Buses:</h2></div>
                <div class="row col-lg-12" style="margin-top:10px"><h4>Active Buses:</h4></div>
                <div class="row col-lg-12" style="margin-left:5%">
                    @foreach (Buses bus in Model.ActiveBuses)
                    {
                        <div class="row col-lg-8">
                            <h5>Bus Number: @Html.DisplayFor(model => bus.BusNumb)</h5>
                        </div>
                    }
                </div>
                <div class="row col-lg-12" style="margin-top:10px"><h4>Inactive Buses:</h4></div>
                <div class="row col-lg-12" style="margin-left:5%">
                    @foreach (Buses bus in Model.InactiveBuses)
                    {
                        <div class="row col-lg-8">
                            <h5>Bus Number: @Html.DisplayFor(model => bus.BusNumb)</h5>
                        </div>
                    }
                </div>
                <div class="row col-lg-12" style="margin-top:10px"><h4>Active Drivers:</h4></div>
                <div class="row col-lg-12" style=" margin-left:5%" ">
                    @foreach (Drivers driver in Model.ActiveDrivers)
                    {
                        <div class="row col-lg-8">
                            <h5>@Html.DisplayFor(model => driver.FirstName) @Html.DisplayFor(model => driver.LastName)</h5>
                        </div>
                    }
                </div>
                <div class="row col-lg-12" style="margin-top:10px"><h4>Inactive Drivers:</h4></div>
                <div class="row col-lg-12" style="margin-left:5%">
                    @foreach (Drivers driver in Model.InactiveDrivers)
                    {
                        <div class="row col-lg-8">
                            <h5>@Html.DisplayFor(model => driver.FirstName) @Html.DisplayFor(model => driver.LastName)</h5>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
</div>
<style>
    .container {
        min-width: 75% !important;
        max-width: 96% !important
    }
</style>
<script>

    function GetRouteInfo() {
        var x = $("#BusDropdown").val();
        console.log(x)
        $.ajax({
            url: "/Home/GetRouteInfo",
            data: { "id": parseInt(x) },
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            success: function (data, status, xhr) {
                console.log(data);
                var busData = '';
                busData += "<div class=\"row col-lg-12\" style=\"outline-style:solid;justify-content:center\"><h2>Bus: " + data.busNumber + "</h2></div>";
                busData += "<div class=\"row col-lg-12\" style=\"margin-top:10px\"><h4>Assigned Route: " + data.routeNumber + "</h4></div>";
                busData += "<div class=\"row col-lg-12\" style=\"margin-top:10px\"><h4>Driver Name: " + data.driverName + "</h4></div>";
                busData += "<div class=\"row col-lg-12\" style=\"margin-top:10px\"><h4>Number of Students: " + data.numberOfStudents + "</h4></div>";
                busData += "<div class=\"row col-lg-12\" style=\"margin-top:10px\"><h4>Status: " + data.status + "</h4></div>";
                busData += "<div class=\"row col-lg-12\" style=\"margin-top:10px\"><h4>Handicap Accessible: " + data.handicap + "</h4></div>";

                $("#BusData").html(busData);
            },
            error: function (xhr, status, error) {
                var err = eval("(" + xhr.responseText + ")");
                alert(err.Message);
            }
        });
    }

    require([
        "esri/Map",
        "esri/views/MapView",
        "esri/widgets/Legend",
        "esri/widgets/ScaleBar",
        "esri/tasks/RouteTask",
        "esri/tasks/support/RouteParameters",
        "esri/tasks/support/FeatureSet",
        "esri/Graphic",
        "esri/layers/GraphicsLayer"
    ], function (Map, MapView, Legend, ScaleBar, RouteTask, RouteParameters, FeatureSet, Graphic, GraphicsLayer) {

        var map = new Map({
            basemap: "streets-navigation-vector"
        });

        var view = new MapView({
            container: "viewDiv",
            map: map,
            center: [-84.515, 39.132],
            zoom: 13
        });

        var legend = new Legend({
            view: view
        });

        var scalebar = new ScaleBar({
            view: view
        });

        // create widget to display map coordinate information
        var coordsWidget = document.createElement("div");
        coordsWidget.id = "coordsWidget";
        coordsWidget.className = "esri-widget esri-component";
        coordsWidget.style.padding = "7px 15px 5px";

        // function to update innerHTML of coordsWidget
        function showCoordinates(pt) {
            var coords = "Lat/Lon " + pt.latitude.toFixed(5) + " " + pt.longitude.toFixed(5) +
                " | Scale 1:" + Math.round(view.scale * 1) / 1 +
                " | Zoom " + view.zoom;
            coordsWidget.innerHTML = coords;
        }

        // updates coordsWidget to display center coordinates when map is stationary
        view.watch("stationary", function (isStationary) {
            showCoordinates(view.center);
        });

        // update coordsWidget to display pointer coordinates when pointer is moving
        // toMap converts screen coordinates to map coordinates
        view.on("pointer-move", function (evt) {
            showCoordinates(view.toMap({ x: evt.x, y: evt.y }));
        });

        // graphics layer is used to store and display graphics
        var graphicsLayer = new GraphicsLayer();
        map.add(graphicsLayer);


        // create a route task
        var routeTask = new RouteTask({
            url: "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World"
        });

        // click map to display route
        // click map to display route
        view.on("click", function (event) {
            drawRoute()
        });

        function drawRoute() {
            getRoutePoints(function (points) {
                displayRoute(points)
            });
            getRouteStops(function (points) {
                view.center = points[0]
                displayRouteStops(points)
            });
        }

        // define graphics for point
        function addGraphicPoint(type, point) {
            var graphic = new Graphic({
                symbol: {
                    type: "simple-marker",
                    color: (type === "start") ? "grey" : (type === "middle") ? "white" : "black",
                    size: "8px"
                },
                geometry: point
            });
            view.graphics.add(graphic);
        }

        // define graphics for line segment
        function addGraphicLine(line) {
            var graphic = new Graphic({
                symbol: {
                    type: "simple-line",
                    color: [5, 150, 255],
                    width: 3
                },
                geometry: line
            });
            view.graphics.add(graphic);
        }

        // get route stops from database based on busid
        function getRouteStops(callback) {
            var x = $("#BusDropdown").val();
            var routeStopsArray = [];
            $.ajax({
                url: "/Home/GetSelectedValueStop",
                data: { "id": parseInt(x) },
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (data, status, xhr) {
                    for (let i = 0; i < data.length; i++) {
                        routeStopsArray.push([data[i].longitude, data[i].lattitude]);
                    }
                    callback(routeStopsArray)
                },
                error: function (xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    alert(err.Message);
                }
            });
        }

        // get route stops from database based on busid
        function getRoutePoints(callback) {
            var x = $("#BusDropdown").val();
            var routePointsArray = [];
            $.ajax({
                url: "/Home/GetSelectedValue",
                data: { "id": parseInt(x) },
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (data, status, xhr) {
                    for (let i = 0; i < data.length; i++) {
                        routePointsArray.push([data[i].longitude, data[i].lattitude]);
                    }
                    callback(routePointsArray)
                },
                error: function (xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    alert(err.Message);
                }
            });
        }

        // display stops based on an input of 2D array containing long/lat for each stop
        function displayRouteStops(stops) {
            for (var i = 0; i < stops.length; i++) {
                var point = {
                    type: "point",
                    longitude: stops[i][0],
                    latitude: stops[i][1]
                };
                if (i == 0) {
                    addGraphicPoint("start", point);
                } else if (i == stops.length - 1) {
                    addGraphicPoint("end", point);
                } else {
                    addGraphicPoint("middle", point);
                }
            }
        }

        // display route
        function displayRoute(points) {
            for (var i = 0; i < points.length - 1; i++) {
                var line = {
                    type: "polyline",
                    paths: [
                        [points[i][0], points[i][1]],
                        [points[i + 1][0], points[i + 1][1]]
                    ]
                };
                addGraphicLine(line);
            }
        }




        view.ui.add(legend, "top-right");
        view.ui.add(scalebar, "bottom-left");
        view.ui.add(coordsWidget, "bottom-right");

        // won't work if put before view.ui.add... section



    });
</script>
